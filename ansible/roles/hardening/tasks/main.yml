---
# tasks file for hardening

  # This collection of tasks creates a empty list and save it as a fact.

- name: 1.1 Disable unused filesystems
  ansible.builtin.set_fact:
      unused_filesystems: []

- name: 1.1.1.1 - Add cramfs to list of unused filesystems
  ansible.builtin.set_fact:
      unused_filesystems: "{{ unused_filesystems + [ 'cramfs' ] }}"
  tags:
      - 1.1.1.1

- name: 1.1.1.2 - Add freevxfs to list of unused filesystems
  ansible.builtin.set_fact:
      unused_filesystems: "{{ unused_filesystems + [ 'freevxfs' ] }}"
  tags:
      - 1.1.1.2

- name: 1.1.1.3 - Add jffs2 to list of unused filesystems
  ansible.builtin.set_fact:
      unused_filesystems: "{{ unused_filesystems + [ 'jffs2' ] }}"
  tags:
      - 1.1.1.3

- name: 1.1.1.4 - Add hfs to list of unused filesystems
  ansible.builtin.set_fact:
      unused_filesystems: "{{ unused_filesystems + [ 'hfs' ] }}"
  tags:
      - 1.1.1.4

- name: 1.1.1.5 - Add hfsplus to list of unused filesystems
  ansible.builtin.set_fact:
      unused_filesystems: "{{ unused_filesystems + [ 'hfsplus' ] }}"
  tags:
      - 1.1.1.5

- name: 1.1.1.7 - Add udf to list of unused filesystems
  ansible.builtin.set_fact:
      unused_filesystems: "{{ unused_filesystems + [ 'udf' ] }}"
  tags:
      - 1.1.1.7

  # With the list complete, use it with the system's package manager
  #  to remove packages from the system that are not needed.

- name: Process unused_filesystem list
  ansible.builtin.package:
      name: unused_filesystems
      state: absent

- name: Add unused_filesystems to /etc/modprobe.d/CIS.conf
  ansible.builtin.lineinfile:
      dest: /etc/modprobe.d/CIS.conf
      line: "install {{ item }} /bin/true"
      state: present
      create: true
      owner: root
      group: root
      mode: 0644
  with_items:
      - "{{ unused_filesystems }}"


  # Create and configure the local-fs systemd service file
- name: 1.1.[2-5] - Ensure /tmp is configured
  block:
      # Create a file to hold the system specific local-fs service information
      #  be sure to set the selinux security context. Even if selinux is disabled,
      #  it's a good idea to make sure it is set on files
      - name: Ensure the local-fs directory is created
        ansible.builtin.file:
          path: /etc/systemd/system/local-fs.target.wants
          state: directory
          owner: root
          group: root
          mode: 0755
          setype: etc_t

      # Add content to the file we created using the blockinfile command.
      # Notify systemd to reload its daemons and start the local-fs service
      - name: 1.1.[2-5] - Configure config file for tmpfs
        ansible.builtin.blockinfile:
          path: /etc/systemd/system/local-fs.target.wants/tmp.mount
          block: |
            [Mount]
            What=tmpfs
            Where=/tmp
            Type=tmpfs
            Options=mode=1777,strictatime,noexec,nodev,nosuid
          create: true

      - name: Ensure the local-fs directory is created
        file:
          path: /etc/systemd/system/local-fs.target.wants
          state: directory
          owner: root
          group: root
          mode: 0755
          setype: etc_t

  tags:
      - 1.1.2
      - 1.1.3
      - 1.1.4


# 1.4 Secure Boot Settings
# The recommendations in this section focus on securing the bootloader and settings
# involved in the boot process directly.

# 1.4.1 Ensure permissions on bootloader config are not overridden
- name: 1.4.1 Ensure permissions on bootloader config are not overridden 
  block:
    - name: 1.4.1 Ensure permissions on bootloader config are not overridden - step 1 - update chmod 444 to chmod 400 in /usr/sbin/grubmkconfig
      shell: sed -ri 's/chmod\s+[0-7][0-7][0-7]\s+\$\{grub_cfg\}\.new/chmod 400 ${grub_cfg}.new/' /usr/sbin/grub-mkconfig
    - name: 1.4.1 Ensure permissions on bootloader config are not overridden - step 2 -  check on password not being set before running chmod command
      shell:  sed -ri 's/ && ! grep "\^password" \$\{grub_cfg\}.new >\/dev\/null//' /usr/sbin/grub-mkconfig
  when: protect_bootloader_permissions
  tags:
    - section1
    - level_1_server
    - level_1_workstation
    - 1.4.1

# 1.4.2 Ensure bootloader password is set
# Setting the boot loader password will require that anyone rebooting the system must enter
# a password before being able to set command line boot parameters
# Note: This recommendation is designed around the grub bootloader, if LILO or another
# bootloader is in use in your environment enact equivalent settings. Replace
# /boot/grub/grub.cfg with the appropriate grub configuration file for your environment.
# Check default passwords have changed
- block:
    - name: If check bootloader_credentials.password has not been changed
      fail:
        msg: "Exiting: Change bootloader_credentials.password from b00tl04derPwd in defaults/main.yml"
    - meta: end_play
  when: set_bootloader_credentials and bootloader_credentials.password is match ("b00tl04derPwd")

- name: 1.4.2 Ensure bootloader password is set
  block:
    - name: 1.4.2 Ensure bootloader password is set - step 1 - check bootloader_credentials.password has been changed
      fail:
        msg: "Exiting: Change bootloader_credentials.password from b00tl04derPwd in defaults/main.yml"
      when: set_bootloader_credentials and bootloader_credentials.password is match ("b00tl04derPwd")

    - name: 1.4.2 Ensure bootloader password is set - step 2 - check if it isn't already set up
      shell: /bin/grep -e "^[\s]*password" /boot/grub/grub.cfg | /usr/bin/awk '{print} END {if (NR == 0) print "continue" ; else print "stop"}'
      register: result
      ignore_errors: true

    - name: 1.4.2 Ensure bootloader password is set - step 3 - create bootloader password hash
      # bash -c must be used in this strange way or mysterious errors are thrown
      shell: /bin/bash -c "echo -e '{{ bootloader_credentials.password }}\n{{ bootloader_credentials.password }}' | grub-mkpasswd-pbkdf2" | /bin/grep 'hash of your password' | /usr/bin/awk '{print $7}'
      register: password
      when:
        - result.stdout == "continue"
        - bootloader_credentials.user
        - bootloader_credentials.password

    - name: 1.4.2 Ensure bootloader password is set - step 4 - create custom grub configuration file
      blockinfile:
        dest: /etc/grub.d/99_custom
        create: yes
        mode: 0700
        block: |
          #!/bin/sh
          cat <<EOF
          set superusers='{{ bootloader_credentials.user }}'
          password_pbkdf2 {{ bootloader_credentials.user }} {{ password.stdout }}
          EOF
        state: present
      when:
        - result.stdout == "continue"
        - bootloader_credentials.user
        - bootloader_credentials.password

    - name: 1.4.2 Ensure bootloader password is set - step 4 - update grub
      shell: update-grub
      when:
        - result.stdout == "continue"
        - bootloader_credentials.user
        - bootloader_credentials.password
  when: set_bootloader_credentials
  tags:
    - 1.4.2

# 1.4.3 Ensure permissions on bootloader config are configured
# The grub configuration file contains information on boot settings and passwords for
# unlocking boot options. The grub configuration is usually grub.cfg stored in /boot/grub/ .
# Note: This recommendation is designed around the grub bootloader, if LILO or another
# bootloader is in use in your environment enact equivalent settings. Replace
# /boot/grub/grub.cfg with the appropriate grub configuration file for your environment
- name: 1.4.3 Ensure permissions on bootloader config are configured
  file:
    path: "/boot/grub/grub.cfg"
    owner: root
    group: root
    mode: "og-rwx"
  tags:
    - 1.4.3

# Section 3, nftables Package
- name: Install nftables Package
  ansible.builtin.apt:
      name: nftables
      state: present
      update_cache: yes

# Section 4, Logging
# The capturing of system events provides system administrators with information to allow them to determine if unauthorized access to their system is occurring.
- name: 4.1.1.1 Ensure auditd is installed
  apt:
    name: ["auditd", "audispd-plugins"]
    state: present
    install_recommends: false
  tags:
    - 4.1.1.1
# 4.1.1.2 Ensure auditd service is enabled
# The capturing of system events provides system administrators with information to allow them to determine if unauthorized access to their system is occurring.
- name: 4.1.1.2 Ensure auditd service is enabled
  service:
    name: auditd
    state: started
    enabled: true
  tags:
    - 4.1.1.2

# 4.1.1.3 Ensure auditing for processes that start prior to auditd is enabled
# Audit events need to be captured on processes that start up prior to auditd , so that potential malicious activity cannot go undetected.
- name: 4.1.1.3 Ensure auditing for processes that start prior to auditd is enabled
  block:
    - name: 4.1.1.3 Ensure auditing for processes that start prior to auditd is enabled - change /etc/default/grub
      replace:
        dest: /etc/default/grub
        regexp: '^(GRUB_CMDLINE_LINUX=(?!.*audit)\"[^\"]*)(\".*)'
        replace: '\1 audit=1\2'
    - name: 4.1.1.3 Ensure auditing for processes that start prior to auditd is enabled - update grub
      shell: update-grub
  tags:
    - 4.1.1.3

# 4.1.1.4 Ensure audit_backlog_limit is sufficient
# During boot if audit=1, then the backlog will hold 64 records. If more that 64 records are created during boot,
# auditd records will be lost and potential malicious activity could go undetected.
- name: 4.1.1.4 Ensure audit_backlog_limit is sufficient
  block:
    - name: 4.1.1.4 Ensure audit_backlog_limit is sufficient - change /etc/default/grub
      replace:
        dest: /etc/default/grub
        regexp: '^(GRUB_CMDLINE_LINUX=(?!.*audit_backlog_limit)\"[^\"]*)(\".*)'
        replace: '\1 audit_backlog_limit={{grub_backlog_limit}}\2'
    - name: 4.1.1.4 Ensure audit_backlog_limit is sufficient - update grub
      shell: update-grub
  tags:
    - 4.1.1.4

# 4.1.2 Configure Data Retention
# 4.1.2.1 Ensure audit log storage size is configured
- name: 4.1.2.1 Ensure audit log storage size is configured
  lineinfile:
    dest: /etc/audit/auditd.conf
    regexp: "^max_log_file( |=)"
    line: "max_log_file = {{ max_log_file }}"
  tags:
    - 4.1.2.1

# 4.1.2.2 Ensure audit logs are not automatically deleted
- name: 4.1.2.2 Ensure audit logs are not automatically deleted
  lineinfile:
    dest: /etc/audit/auditd.conf
    regexp: "^max_log_file_action"
    line: "max_log_file_action = {{ max_log_file_action }}"
  tags:
    - 4.1.2.2
# 4.1.2.3 Ensure system is disabled when audit logs are full
- name: 4.1.2.3 Ensure system is disabled when audit logs are full
  block:
    - name: 4.1.2.3 Ensure system is disabled when audit logs are full | admin_space_left_action
      lineinfile:
        dest: /etc/audit/auditd.conf
        regexp: "^admin_space_left_action"
        line: "admin_space_left_action = {{ admin_space_left_action }}"
    - name: 4.1.2.3 Ensure system is disabled when audit logs are full | space_left_action
      lineinfile:
        dest: /etc/audit/auditd.conf
        regexp: "^space_left_action"
        line: "space_left_action = {{ space_left_action }}"
    - name: 4.1.2.3 Ensure system is disabled when audit logs are full | action_mail_acct
      lineinfile:
        dest: /etc/audit/auditd.conf
        regexp: "^action_mail_acct"
        line: "action_mail_acct = {{ action_mail_acct }}"
  tags:
    - 4.1.2.3
# 4.1.3 Ensure events that modify date and time information are collected
# Unexpected changes in system date and/or time could be a sign of malicious activity on the system.
- name: 4.1.3 Ensure events that modify date and time information are collected
  template:
    src: files/templates/auditd/time-change.rules.j2
    dest: /etc/audit/rules.d/time-change.rules
    owner: root
    group: root
    mode: 0600
  tags:
    - 4.1.3
# 4.1.4 Ensure events that modify user/group information are collected
# # Unexpected changes to these files could be an indication that the system has been compromised and that an unauthorized user is attempting to hide their activities or compromise additional accounts.
- name: 4.1.4 Ensure events that modify user/group information are collected
  template:
    src: files/templates/auditd/identity.rules.j2
    dest: /etc/audit/rules.d/identity.rules
    owner: root
    group: root
    mode: 0600
  tags:
    - 4.1.4
# 4.1.5 Ensure events that modify the system's network environment are collected
# Monitoring sethostname and setdomainname will identify potential unauthorized changes to host and domainname of a system. The changing of these names could potentially break
# security parameters that are set based on those names. The /etc/hosts file is monitored for changes in the file that can indicate an unauthorized intruder is trying to change
# machine associations with IP addresses and trick users and processes into connecting to unintended machines. Monitoring /etc/issue and /etc/issue.net is important, as
# intruders could put disinformation into those files and trick users into providing information to the intruder. Monitoring /etc/network is important as it can show if
# network interfaces or scripts are being modified in a way that can lead to the machine becoming unavailable or compromised. All audit records will be tagged with the identifier "system-locale."
- name: 4.1.5 Ensure events that modify the system's network environment are collected
  template:
    src: files/templates/auditd/system-locale.rules.j2
    dest: /etc/audit/rules.d/system-locale.rules
    owner: root
    group: root
    mode: 0600
  tags:
    - 4.1.5
# 4.1.6 Ensure events that modify the system's Mandatory Access Controls are collected
# # Changes to files in these directories could indicate that an unauthorized user is attempting to modify access controls and change security contexts, leading to a compromise of the system.
- name: 4.1.6 Ensure events that modify the system's Mandatory Access Controls are collected
  template:
    src: files/templates/auditd/MAC-policy.rules.j2
    dest: /etc/audit/rules.d/MAC-policy.rules
    owner: root
    group: root
    mode: 0600
  tags:
    - 4.1.6
# 4.1.7 Ensure login and logout events are collected
# Monitoring login/logout events could provide a system administrator with information associated with brute force attacks against user logins.
- name: 4.1.7 Ensure login and logout events are collected
  template:
    src: files/templates/auditd/logins.rules.j2
    dest: /etc/audit/rules.d/logins.rules
    owner: root
    group: root
    mode: 0600
  tags:
    - 4.1.7
# 4.1.8 Ensure session initiation information is collected
# # Monitoring these files for changes could alert a system administrator to logins occurring at unusual hours, which could indicate intruder activity (i.e. a user logging in at a time when they do not normally log in).
- name: 4.1.8 Ensure session initiation information is collected
  template:
    src: files/templates/auditd/session.rules.j2
    dest: /etc/audit/rules.d/session.rules
    owner: root
    group: root
    mode: 0600
  tags:
    - 4.1.8
# 4.1.9 Ensure discretionary access control permission modification events are collected
# Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation.
- name: 4.1.9 Ensure discretionary access control permission modification events are collected
  template:
    src: files/templates/auditd/perm_mod.rules.j2
    dest: /etc/audit/rules.d/perm_mod.rules
    owner: root
    group: root
    mode: 0600
  tags:
    - 4.1.9
# 4.1.10 Ensure unsuccessful unauthorized file access attempts are collected
# Failed attempts to open, create or truncate files could be an indication that an individual or process is trying to gain unauthorized access to the system.
- name: 4.1.10 Ensure unsuccessful unauthorized file access attempts are collected
  template:
    src: files/templates/auditd/audit.rules.j2
    dest: /etc/audit/rules.d/audit.rules
    owner: root
    group: root
    mode: 0600
  tags:
    - 4.1.10
# 4.1.11 Ensure use of privileged commands is collected
- name: 4.1.11 Ensure use of privileged commands is collected
  block:
    - name: 4.1.11 Ensure use of privileged commands is collected | get data
      script: 4_1_11.sh
      register: output_4_1_11
    - name: 4.1.11 Ensure use of privileged commands is collected | apply
      template:
        src: files/templates/auditd/privileged.rules.j2
        dest: /etc/audit/rules.d/privileged.rules
        owner: root
        group: root
        mode: 0600
  tags:
    - 4.1.11
# 4.1.12 Ensure successful file system mounts are collected
# It is highly unusual for a non privileged user to mount file systems to the system. While tracking mount commands gives the system administrator evidence that external media
# may have been mounted (based on a review of the source of the mount and confirming it's an external media type), it does not conclusively indicate that data was exported to the
# media. System administrators who wish to determine if data were exported, would also have to track successful open , creat and truncate system calls requiring write access to a
# file under the mount point of the external media file system. This could give a fair indication that a write occurred. The only way to truly prove it, would be to track
# successful writes to the external media. Tracking write system calls could quickly fill up the audit log and is not recommended. Recommendations on configuration options to track data export to media is beyond the scope of this document.
- name: 4.1.12 Ensure successful file system mounts are collected
  template:
    src: files/templates/auditd/system_mounts.rules.j2
    dest: /etc/audit/rules.d/system_mounts.rules
    owner: root
    group: root
    mode: 0600
  tags:
    - 4.1.12
# 4.1.13 Ensure file deletion events by users are collected
# Monitoring these calls from non-privileged users could provide a system administrator with evidence that inappropriate removal of files and file attributes associated with
# protected files is occurring. While this audit option will look at all events, system administrators will want to look for specific privileged files that are being deleted or altered.
- name: 4.1.13 Ensure file deletion events by users are collected
  template:
    src: files/templates/auditd/delete.rules.j2
    dest: /etc/audit/rules.d/delete.rules
    owner: root
    group: root
    mode: 0600
  tags:
    - 4.1.13
# 4.1.14 Ensure changes to system administration scope (sudoers) is collected
# Changes in the /etc/sudoers file can indicate that an unauthorized change has been made to scope of system administrator activity.
- name: 4.1.14 Ensure changes to system administration scope (sudoers) is collected
  template:
    src: files/templates/auditd/scope.rules.j2
    dest: /etc/audit/rules.d/scope.rules
    owner: root
    group: root
    mode: 0600
  tags:
    - 4.1.14
# 4.1.15 Ensure system administrator command executions (sudo) are collected
# # # Creating an audit log of administrators with temporary elevated privileges and the operation(s) they performed is essential to reporting. Administrators will want to correlate the events written to the audit trail with the records written to sudo logfile to verify if unauthorized commands have been executed.
- name: 4.1.15 Ensure system administrator command executions (sudo) are collected
  template:
    src: files/templates/auditd/actions.rules.j2
    dest: /etc/audit/rules.d/actions.rules
    owner: root
    group: root
    mode: 0600
  tags:
    - 4.1.15
# 4.1.16 Ensure kernel module loading and unloading is collected
# # # # Monitoring the use of insmod , rmmod and modprobe could provide system administrators with evidence that an unauthorized user loaded or unloaded a kernel module, possibly compromising the security of the system. Monitoring of the init_module and delete_module system calls would reflect an unauthorized user attempting to use a different program to load and unload modules.
- name: 4.1.16 Ensure kernel module loading and unloading is collected
  template:
    src: files/templates/auditd/modules.rules.j2
    dest: /etc/audit/rules.d/modules.rules
    owner: root
    group: root
    mode: 0600
  tags:
    - 4.1.16
# 4.1.17 Ensure the audit configuration is immutable
# # # In immutable mode, unauthorized users cannot execute changes to the audit system to potentially hide malicious activity and then put the audit rules back. Users would most likely notice a system reboot and that could alert administrators of an attempt to make unauthorized audit changes.
- name: 4.1.17 Ensure the audit configuration is immutable
  block:
    - name: 4.1.17 Ensure the audit configuration is immutable
      template:
        src: files/templates/auditd/99-finalize.rules.j2
        dest: /etc/audit/rules.d/99-finalize.rules
        owner: root
        group: root
        mode: 0600
    - name: 4.1.17 Ensure the audit configuration is immutable
      template:
        src: files/templates/auditd/11-init.rules.j2
        dest: /etc/audit/rules.d/11-init.rules
        owner: root
        group: root
        mode: 0600
      notify:
        - audit rules load
        - auditd restart
  ignore_errors: yes
  tags:
    - 4.1.17

- name: 4.2.1.1 - Ensure rsyslog is installed
  ansible.builtin.package:
      name: rsyslog
      state: present
  tags:
      - 4.2.1.1

- name: 4.2.1.2 - Enable Rsyslog
  ansible.builtin.service:
      name: rsyslog
      enabled: true
  tags:
      - 4.2.1.2

# 4.2.1.4 Ensure rsyslog default file permissions configured
# It is important to ensure that log files have the correct permissions to ensure that sensitive data is archived and protected.
- name: 4.2.1.4 Ensure rsyslog default file permissions configured
  lineinfile:
    dest: /etc/rsyslog.conf
    regexp: '^\$FileCreateMode'
    line: "$FileCreateMode 0640"
  tags:
    - 4.2.1.4
# 4.2.1.5 Ensure rsyslog is configured to send logs to a remote log host
# # Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system
- name: 4.2.1.5 Ensure rsyslog default file permissions configured
  lineinfile:
    path: /etc/rsyslog.conf
    backup: yes
    block: |
      *.* action(type="omfwd" target="{{ remoteSyslog.host }}" port="{{ remoteSyslog.port }}" protocol="{{ remoteSyslog.protocol }}" action.resumeRetryCount="100" queue.type="LinkedList" queue.size="1000")
  when: remoteSyslog.enable == True
  tags:
    - 4.2.1.5

# 4.2.1.6 Ensure remote rsyslog messages are only accepted on designated log hosts.
# The guidance in the section ensures that remote log hosts are configured to only accept rsyslog data from hosts within the specified domain and that those systems that are not designed to be log hosts do not accept any remote rsyslog messages. This provides protection from spoofed log data and ensures that system administrators are reviewing reasonably complete syslog data in a central location.
- name: 4.2.1.6 Ensure remote rsyslog messages are only accepted on designated log hosts.
  block:
    - name: 4.2.1.6 Ensure remote rsyslog messages are only accepted on designated log hosts. | $ModLoad
      lineinfile:
        dest: /etc/rsyslog.conf
        regexp: '^\$ModLoad'
        line: "$ModLoad imtcp"
    - name: 4.2.1.6 Ensure remote rsyslog messages are only accepted on designated log hosts. | $InputTCPServerRun
      lineinfile:
        dest: /etc/rsyslog.conf
        regexp: '^\$InputTCPServerRun'
        line: "$InputTCPServerRun 514"
      notify:
        - rsyslog restart
  tags:
    - 4.2.1.6
# 4.2.2 Configure journald
# 4.2.2.1 Ensure journald is configured to send logs to rsyslog
# Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system.
- name: 4.2.2.1 Ensure journald is configured to send logs to rsyslog
  lineinfile:
    dest: /etc/systemd/journald.conf
    regexp: "(#)?ForwardToSyslog=(yes|no)"
    line: ForwardToSyslog=yes
  tags:
    - 4.2.2.1

# 4.2.2.2 Ensure journald is configured to compress large log files
- name: 4.2.2.2 Ensure journald is configured to compress large log files
  lineinfile:
    dest: /etc/systemd/journald.conf
    regexp: "(#)?Compress=(yes|no)"
    line: Compress=yes
  tags:
    - 4.2.2.2

# 4.2.2.3 Ensure journald is configured to write logfiles to persistent disk
# Writing log data to disk will provide the ability to forensically reconstruct events which may have impacted the operations or security of a system even after a system crash or reboot.
- name: 4.2.2.3 Ensure journald is configured to write logfiles to persistent disk
  lineinfile:
    dest: /etc/systemd/journald.conf
    regexp: "(#)?Storage=(auto|persistent)"
    line: Storage=persistent
  notify:
    - journald restart
  tags:
    - 4.2.2.3
# 4.2.3 Ensure permissions on all logfiles are configured
# It is important to ensure that log files have the correct permissions to ensure that sensitive data is archived and protected.
- name: 4.2.3 Ensure permissions on all logfiles are configured
  shell: |
    find /var/log -type f -exec chmod g-wx,o-rwx "{}" + -o -type d -exec chmod g-w,o-rwx "{}" +
  tags:
    - 4.2.3
# 4.3 Ensure logrotate is configured
# # By keeping the log files smaller and more manageable, a system administrator can easily archive these files to another system and spend less time looking through inordinately large log files.
- name: 4.3 Ensure logrotate is configured
  replace:
    path: /etc/logrotate.d/rsyslog
    regexp: '^(\s*)(daily|weekly|monthly|yearly)$'
    replace: "\\1{{ logrotate_policy }}"
  tags:
    - "4.3"
# 4.4 Ensure logrotate assigns appropriate permissions
# It is important to ensure that log files have the correct permissions to ensure that sensitive data is archived and protected.
- name: 4.4 Ensure logrotate assigns appropriate permissions
  block:
    - name: 4.4 Ensure logrotate assigns appropriate permissions - /etc/logrotate.conf
      lineinfile:
        path: /etc/logrotate.conf
        regexp: "^(\\*)screate\\s*(\\S*)\\s*(\\S*)\\s*(\\S*)"
        line: \g<1> create 0640 \g<3> \g<4>
        backrefs: true
      notify:
        - journald restart
    - name: 4.4 Ensure logrotate assigns appropriate permissions - Find files in /etc/logrotate.d/*
      find:
        file_type: file
        paths: "/etc/logrotate.d/"
      register: configFiles
    - name: Debug
      debug:
          msg: "{{ item.path }}"
      with_items: " {{ configFiles.files }}"
    - name: 4.4 Ensure logrotate assigns appropriate permissions - Change files in /etc/logrotate.d/*
      lineinfile:
        path: "{{ item.path }}"
        regexp: "^(\\s*)create\\s*(\\S*)\\s*(\\S*)\\s*(\\S*)"
        line: \g<1> create 0640 \g<3> \g<4>
        backrefs: true
      with_items: " {{ configFiles.files }}"
      notify:
        - journald restart
  tags:
    - "4.4"


  # This control is early in order to create the files. This will
  # make sure they are available when cron starts
- name: Create the cron/at allow files (5.1.8)
  ansible.builtin.copy:
      dest: "{{ item }}"
      content: ""
      force: false
      owner: root
      group: root
      mode: 0644
  with_items:
      - /etc/cron.allow
      - /etc/at.allow
  tags:
      - 5.1.8

- name: 5.1.1 - Ensure cron is enabled
  ansible.builtin.service:
      name: cron
      enabled: true
      state: started
  tags:
      - 5.1.1

- name: 5.1.2 - Ensure permissions on /etc/crontab
  ansible.builtin.file:
      path: /etc/crontab
      owner: root
      group: root
      mode: 0600
  tags:
      - 5.1.2

- name: 5.1.[3-7] - Ensure permissions on crontab directories
  ansible.builtin.file:
      path: "{{ item }}"
      owner: root
      group: root
      mode: 0700
  loop:
        - /etc/cron.hourly
        - /etc/cron.daily
        - /etc/cron.weekly
        - /etc/cron.monthly
        - /etc/cron.d
  tags:
      - 5.1.3
      - 5.1.4
      - 5.1.5
      - 5.1.6
      - 5.1.7


# 5.2.2 Ensure sudo commands use pty
- name: 5.2.2 Ensure sudo commands use pty
  lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: "^Defaults use_pty"
      line: "Defaults use_pty"
      validate: "visudo -cf %s"
  tags:
      - 5.2.2

# 5.2.3 Ensure sudo log file exists
- name: 5.2.3 Ensure sudo log file exists
  lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: "^Defaults logfile.*"
      line: 'Defaults logfile="/var/log/sudo.log"'
      validate: "visudo -cf %s"
  tags:
      - 5.2.3

 # 5.3 Configure SSH Server
# 5.3.1 Ensure permissions on /etc/ssh/sshd_config are configured
- name: 5.3.1 Ensure permissions on /etc/ssh/sshd_config are configured
  file:
      dest: /etc/ssh/sshd_config
      state: file
      owner: root
      group: root
      mode: 0600
  tags:
      - 5.3.1

# 5.3.6 Ensure SSH X11 forwarding is disabled
- name: 5.3.6 Ensure SSH X11 forwarding is disabled
  lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: "^X11Forwarding"
      line: "X11Forwarding no"
  tags:
      - 5.3.6

# 5.3.7 Ensure SSH MaxAuthTries is set to 4 or less
- name: 5.3.7 Ensure SSH MaxAuthTries is set to 4 or less
  lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: '^(#)?MaxAuthTries \d'
      line: "MaxAuthTries {{ max_auth_tries }}"
  tags:
    - 5.3.7

# 5.3.20 Ensure SSH AllowTcpForwarding is disabled
- name: 5.3.20 Ensure SSH AllowTcpForwarding is disabled
  lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: "^AllowTcpForwarding"
      line: "AllowTcpForwarding no"
  tags:
      - 5.3.20
# 5.3.21 Ensure SSH MaxStartups is configured
- name: "5.3.21 Ensure SSH MaxStartups is configured to {{ ssh_max_startups }}"
  lineinfile:
      state: present
      dest: /etc/ssh/sshd_config
      regexp: "^MaxStartups"
      line: "MaxStartups {{ ssh_max_startups }}"
  tags:
      - 5.3.21

# 5.4 Configure PAM
# 5.4.1 Ensure password creation requirements are configured
# Strong passwords protect systems from being hacked through brute force methods.
- name: 5.4.1 Ensure password creation requirements are configured
  block:
    - name: 5.4.1 Ensure password creation requirements are configured
      apt:
          name:
            - libpam-pwquality
            - cracklib-runtime
          state: present
          install_recommends: false
    - name: 5.4.1 Ensure password creation requirements are configured
      lineinfile:
          state: present
          create: yes
          dest: /etc/security/pwquality.conf
          regexp: "^{{ item.key }}"
          line: "{{ item.key }} = {{ item.value }}"
      with_items:
          - { key: "minlen", value: "14" }
          - { key: "dcredit", value: "-1" }
          - { key: "ucredit", value: "-1" }
          - { key: "ocredit", value: "-1" }
          - { key: "lcredit", value: "-1" }
  tags:
      - 5.4.1
# 5.4.2 Ensure lockout for failed password attempts is configured
# Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.
- name: 5.4.2 Ensure lockout for failed password attempts is configured
  block:
    - name: 5.4.2 Ensure lockout for failed password attempts is configured | common-auth
      lineinfile:
          dest: /etc/pam.d/common-auth
          line: "auth required pam_tally2.so onerr=fail audit silent deny=5 unlock_time=900"
    - name: 5.4.2 Ensure lockout for failed password attempts is configured | pam_deny.so
      lineinfile:
          dest: /etc/pam.d/common-account
          regexp: '^account\srequisite'
          line: "account requisite pam_deny.so"
    - name: 5.4.2 Ensure lockout for failed password attempts is configured | pam_tally2.so
      lineinfile:
          dest: /etc/pam.d/common-account
          regexp: '^account\srequired'
          line: "account required pam_tally2.so"
  tags:
      - 5.4.2
# 5.4.3 Ensure password reuse is limited
# Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.
- name: 5.4.3 Ensure password reuse is limited
  lineinfile:
      dest: /etc/pam.d/common-password
      line: "password required pam_pwhistory.so remember=5"
  tags:
      - 5.4.3

# Configure sysctl.conf
- name: Copy sysctl.conf file
  ansible.builtin.copy:
      src: sysctl.conf
      dest: /etc/sysctl.conf
      backup: yes
# Configure IPv4 iptables

- name: Configure IPv6 security
  ansible.builtin.shell: sysctl -w net.ipv6.conf.all.accept_ra=0 && sysctl -w net.ipv6.conf.all.accept_redirects=0 && sysctl -w net.ipv6.conf.default.accept_ra=0 && sysctl -w net.ipv6.conf.default.accept_redirects=0

- name: Configure IPv4 security
  ansible.builtin.shell: sysctl -w net.ipv4.conf.all.rp_filter=1 && sysctl -w net.ipv4.conf.all.secure_redirects=0 && sysctl -w net.ipv4.conf.default.rp_filter=1 && sysctl -w net.ipv4.conf.default.secure_redirects=0

# Configure passwd
- name: Copy common-password file
  ansible.builtin.copy:
      src: common-password
      dest: /etc/pam.d/common-password
      backup: yes

